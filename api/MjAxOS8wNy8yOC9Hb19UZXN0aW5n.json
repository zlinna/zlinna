{"title":"Go Testing;How,What,Why","date":"2019-07-28T02:43:54.507Z","date_formatted":{"ll":"Jul 28, 2019","L":"07/28/2019","MM-DD":"07-28"},"link":"2019/07/28/Go_Testing","comments":true,"tags":["Go","测试理论"],"categories":["test"],"updated":"2020-01-06T16:12:39.533Z","content":"<h2><span id=\"前言\">前言</span><a href=\"2019/07/28/Go_Testing#undefined\"></a></h2><p>关于 Go 测试，我们应该知道测试方式（或者说测试手段）、测试对象及测试原因。</p>\n<h2><span id=\"how-测试方式\">How 测试方式</span><a href=\"2019/07/28/Go_Testing#undefined\"></a></h2><h3><span id=\"测试实现\">测试实现</span><a href=\"2019/07/28/Go_Testing#undefined\"></a></h3><p>举个例子。针对字符串分割函数（如下），实现单元测试。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> goTest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"strings\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Split slices s into all substrings separated by sep and</span></span><br><span class=\"line\"><span class=\"comment\">// returns a slice of the substrings between those separators.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Split</span><span class=\"params\">(s, sep <span class=\"keyword\">string</span>)</span> []<span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result []<span class=\"keyword\">string</span></span><br><span class=\"line\">    i := strings.Index(s, sep)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i &gt; <span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">        result = <span class=\"built_in\">append</span>(result, s[:i])</span><br><span class=\"line\">        s = s[i+<span class=\"built_in\">len</span>(sep):]</span><br><span class=\"line\">        i = strings.Index(s, sep)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">append</span>(result, s)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>在当前目录下且一样的包名 goTest ，写一个简单的 go 测试函数，如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> goTest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"reflect\"</span></span><br><span class=\"line\">    <span class=\"string\">\"testing\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestSplit</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">    got := Split(<span class=\"string\">\"a/b/c\"</span>, <span class=\"string\">\"/\"</span>)</span><br><span class=\"line\">    want := []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> !reflect.DeepEqual(want, got) &#123;</span><br><span class=\"line\">        t.Fatalf(<span class=\"string\">\"expected: %v, got: %v\"</span>, want, got)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>测试函数必须以 Test 开头， 且必须携带一个 *testing.T 参数。 t *testing.T 提供改测试函数的打印、跳过、失败功能。</p>\n<h3><span id=\"测试执行\">测试执行</span><a href=\"2019/07/28/Go_Testing#undefined\"></a></h3><a id=\"more\"></a>\n<p>当前目录下，执行 go test ，输出如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; go <span class=\"built_in\">test</span></span><br><span class=\"line\">PASS</span><br><span class=\"line\">ok      goTest  0.005s</span><br></pre></td></tr></table></div></figure>\n<p>如果项目中存在多个 package ，若要执行所有包的测试可以在项目根目录下使用 go test ./… ，输出如下（例子：github.com/mattn/go-sqlite3）：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; go <span class=\"built_in\">test</span> ./...</span><br><span class=\"line\">ok      github.com/mattn/go-sqlite3 14.693s</span><br><span class=\"line\">?       github.com/mattn/go-sqlite3/upgrade [no <span class=\"built_in\">test</span> files]</span><br></pre></td></tr></table></div></figure>\n<h3><span id=\"代码测试覆盖率\">代码测试覆盖率</span><a href=\"2019/07/28/Go_Testing#undefined\"></a></h3><p>还是以字符串分割函数为例， 获取当前代码测试覆盖率方式如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; go <span class=\"built_in\">test</span> -coverprofile=c.out</span><br><span class=\"line\">PASS</span><br><span class=\"line\">coverage: 100.0% of statements</span><br><span class=\"line\">ok      goTest  0.005s</span><br></pre></td></tr></table></div></figure>\n<p>数据显示覆盖率为 100% 。若要以 HTML 方式显示可以使用命令 <strong>go tool cover -html=c.out</strong> 。</p>\n<p>【tip】 一行命令 cover 获取当前目录下的代码测试覆盖度。 在 ~/.bashrc 中添加如下命令：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">cover</span></span> () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">local</span> t=$(mktemp -t cover)</span><br><span class=\"line\">    go <span class=\"built_in\">test</span> <span class=\"variable\">$COVERFLAGS</span> -coverprofile=<span class=\"variable\">$t</span> <span class=\"variable\">$@</span> \\</span><br><span class=\"line\">      &amp;&amp; go tool cover -func=<span class=\"variable\">$t</span> \\</span><br><span class=\"line\">      &amp;&amp; unlink <span class=\"variable\">$t</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>执行后获取的测试覆盖度结果如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cover</span><br><span class=\"line\">PASS</span><br><span class=\"line\">coverage: 100.0% of statements</span><br><span class=\"line\">ok      goTest  0.008s</span><br><span class=\"line\">goTest/wwg_split.go:7:  Split       100.0%</span><br><span class=\"line\">total:             (statements)     100.0%</span><br></pre></td></tr></table></div></figure>\n<p>问题：<strong>测试覆盖率 100% ，结束了？</strong></p>\n<p>多个测试用例的情况下，使用表组测试用例装填。更改 TestSplit 如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestSplit</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">    tests := []<span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">        input <span class=\"keyword\">string</span></span><br><span class=\"line\">        sep <span class=\"keyword\">string</span></span><br><span class=\"line\">        want []<span class=\"keyword\">string</span></span><br><span class=\"line\">    &#125;&#123;</span><br><span class=\"line\">        &#123;input: <span class=\"string\">\"a/b/c\"</span>, sep: <span class=\"string\">\"/\"</span>, want: []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>&#125;&#125;,</span><br><span class=\"line\">        &#123;input: <span class=\"string\">\"a/b/c\"</span>, sep: <span class=\"string\">\",\"</span>, want: []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"a/b/c\"</span>&#125;&#125;,</span><br><span class=\"line\">        &#123;input: <span class=\"string\">\"a/b/c/\"</span>, sep: <span class=\"string\">\"/\"</span>, want: []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>&#125;&#125;,  <span class=\"comment\">// trailing sep</span></span><br><span class=\"line\">        &#123;input: <span class=\"string\">\"abc\"</span>, sep: <span class=\"string\">\"/\"</span>, want: []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"abc\"</span>&#125;&#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, tc := <span class=\"keyword\">range</span> tests &#123;</span><br><span class=\"line\">        got := Split(tc.input, tc.sep)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> !reflect.DeepEqual(tc.want, got) &#123;</span><br><span class=\"line\">            t.Fatalf(<span class=\"string\">\"expected: %v, got: %v\"</span>, tc.want, got)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>增加测试用例 trailing sep 后，执行测试，结果如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; go <span class=\"built_in\">test</span></span><br><span class=\"line\">--- FAIL: TestSplit (0.00s)</span><br><span class=\"line\">    wwg_split_test.go:23: expected: [a b c], got: [a b c ]</span><br><span class=\"line\">FAIL</span><br><span class=\"line\"><span class=\"built_in\">exit</span> status 1</span><br><span class=\"line\">FAIL    goTest\t0.005s</span><br></pre></td></tr></table></div></figure>\n<p>根据该结果很难一下子在表组测试用例中查出是哪条。可以将 <strong>表组测试用例实现改为 map 形式</strong> ，具体如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestSplit</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">    tests := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">        input <span class=\"keyword\">string</span></span><br><span class=\"line\">        sep <span class=\"keyword\">string</span></span><br><span class=\"line\">        want []<span class=\"keyword\">string</span></span><br><span class=\"line\">    &#125;&#123;</span><br><span class=\"line\">        <span class=\"string\">\"simple\"</span>: &#123;input: <span class=\"string\">\"a/b/c\"</span>, sep: <span class=\"string\">\"/\"</span>, want: []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>&#125;&#125;,</span><br><span class=\"line\">        <span class=\"string\">\"wrong sep\"</span>: &#123;input: <span class=\"string\">\"a/b/c\"</span>, sep: <span class=\"string\">\",\"</span>, want: []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"a/b/c\"</span>&#125;&#125;,</span><br><span class=\"line\">        <span class=\"string\">\"trailing sep\"</span>: &#123;input: <span class=\"string\">\"a/b/c/\"</span>, sep: <span class=\"string\">\"/\"</span>, want: []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>&#125;&#125;,</span><br><span class=\"line\">        <span class=\"string\">\"no sep\"</span>: &#123;input: <span class=\"string\">\"abc\"</span>, sep: <span class=\"string\">\"/\"</span>, want: []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"abc\"</span>&#125;&#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> name, tc := <span class=\"keyword\">range</span> tests &#123;</span><br><span class=\"line\">\t\tgot := Split(tc.input, tc.sep)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> !reflect.DeepEqual(tc.want, got) &#123;</span><br><span class=\"line\">\t\t\tt.Errorf(<span class=\"string\">\"%s expected: %v, got: %v\"</span>, name, tc.want, got)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>执行测试结果如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; go <span class=\"built_in\">test</span></span><br><span class=\"line\">--- FAIL: TestSplit (0.00s)</span><br><span class=\"line\">    wwg_split_test.go:23: trailing sep expected: [a b c], got: [a b c ]</span><br><span class=\"line\">FAIL</span><br><span class=\"line\"><span class=\"built_in\">exit</span> status 1</span><br><span class=\"line\">FAIL\tgoTest\t0.005s</span><br></pre></td></tr></table></div></figure>\n<p>Sub tests 使用，及 ‘%#v’ format 使用，更改 TestSplit 如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestSplit</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\ttests := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\t\tinput <span class=\"keyword\">string</span></span><br><span class=\"line\">\t\tsep <span class=\"keyword\">string</span></span><br><span class=\"line\">\t\twant []<span class=\"keyword\">string</span></span><br><span class=\"line\">\t&#125;&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"simple\"</span>: &#123;input: <span class=\"string\">\"a/b/c\"</span>, sep: <span class=\"string\">\"/\"</span>, want: []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>&#125;&#125;,</span><br><span class=\"line\">\t\t<span class=\"string\">\"wrong sep\"</span>: &#123;input: <span class=\"string\">\"a/b/c\"</span>, sep: <span class=\"string\">\",\"</span>, want: []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"a/b/c\"</span>&#125;&#125;,</span><br><span class=\"line\">\t\t<span class=\"string\">\"trailing sep\"</span>: &#123;input: <span class=\"string\">\"a/b/c/\"</span>, sep: <span class=\"string\">\"/\"</span>, want: []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>&#125;&#125;,</span><br><span class=\"line\">\t\t<span class=\"string\">\"no sep\"</span>: &#123;input: <span class=\"string\">\"abc\"</span>, sep: <span class=\"string\">\"/\"</span>, want: []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"abc\"</span>&#125;&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> name, tc := <span class=\"keyword\">range</span> tests &#123;</span><br><span class=\"line\">\t\tt.Run(name, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t\t\tgot := Split(tc.input, tc.sep)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> !reflect.DeepEqual(tc.want, got) &#123;</span><br><span class=\"line\">\t\t\t\tt.Fatalf(<span class=\"string\">\"%s expected: %#v, got: %#v\"</span>, name, tc.want, got)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>测试结果如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; go <span class=\"built_in\">test</span></span><br><span class=\"line\">--- FAIL: TestSplit (0.00s)</span><br><span class=\"line\">    --- FAIL: TestSplit/trailing_sep (0.00s)</span><br><span class=\"line\">        wwg_split_test.go:24: trailing sep expected: []string&#123;<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>&#125;, got: []string&#123;<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"\"</span>&#125;</span><br><span class=\"line\">FAIL</span><br><span class=\"line\"><span class=\"built_in\">exit</span> status 1</span><br><span class=\"line\">FAIL\tgoTest\t0.005s</span><br></pre></td></tr></table></div></figure>\n<p>更好的打印格式，可以访问：</p>\n<ul>\n<li><a href=\"https://github.com/k0kubun/pp\" target=\"_blank\" rel=\"noopener\">https://github.com/k0kubun/pp</a></li>\n<li><a href=\"https://github.com/davecgh/go-spew\" target=\"_blank\" rel=\"noopener\">https://github.com/davecgh/go-spew</a></li>\n<li><a href=\"https://github.com/google/go-cmp\" target=\"_blank\" rel=\"noopener\">https://github.com/google/go-cmp</a></li>\n</ul>\n<p>使用 google/go-cmp 优化打印， 更改 TestSplit 如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> name, tc := <span class=\"keyword\">range</span> tests &#123;</span><br><span class=\"line\">\tt.Run(name, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t\tgot := Split(tc.input, tc.sep)</span><br><span class=\"line\">           diff := cmp.Diff(tc.want, got)</span><br><span class=\"line\">           <span class=\"keyword\">if</span> diff != <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">               t.Fatalf(diff)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>执行测试结果如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; go <span class=\"built_in\">test</span></span><br><span class=\"line\">--- FAIL: TestSplit (0.00s)</span><br><span class=\"line\">    --- FAIL: TestSplit/trailing_sep (0.00s)</span><br><span class=\"line\">        wwg_split_test.go:29:   []string&#123;</span><br><span class=\"line\">              \t<span class=\"string\">\"a\"</span>,</span><br><span class=\"line\">              \t<span class=\"string\">\"b\"</span>,</span><br><span class=\"line\">              \t<span class=\"string\">\"c\"</span>,</span><br><span class=\"line\">            + \t<span class=\"string\">\"\"</span>,</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">FAIL</span><br><span class=\"line\"><span class=\"built_in\">exit</span> status 1</span><br><span class=\"line\">FAIL\tgoTest\t0.005s</span><br></pre></td></tr></table></div></figure>\n<p>修复bug后 Split 代码如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Split slices s into all substrings separated by sep and</span></span><br><span class=\"line\"><span class=\"comment\">// returns a slice of the substrings between those separators.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Split</span><span class=\"params\">(s, sep <span class=\"keyword\">string</span>)</span> []<span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> result []<span class=\"keyword\">string</span></span><br><span class=\"line\">\ti := strings.Index(s, sep)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i &gt; <span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">\t\tresult = <span class=\"built_in\">append</span>(result, s[:i])</span><br><span class=\"line\">\t\ts = s[i+<span class=\"built_in\">len</span>(sep):]</span><br><span class=\"line\">\t\ti = strings.Index(s, sep)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(s) &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tresult = <span class=\"built_in\">append</span>(result, s)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result**</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>执行测试，结果如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; go <span class=\"built_in\">test</span></span><br><span class=\"line\">PASS</span><br><span class=\"line\">ok  \tgoTest\t0.006s</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; cover</span><br><span class=\"line\">PASS</span><br><span class=\"line\">coverage: 100.0% of statements</span><br><span class=\"line\">ok  \tgoTest\t0.006s</span><br><span class=\"line\">goTest/wwg_split.go:7:\tSplit\t\t100.0%</span><br><span class=\"line\">total:                  (statements)\t100.0%</span><br></pre></td></tr></table></div></figure>\n<h2><span id=\"what-测试对象\">What 测试对象</span><a href=\"2019/07/28/Go_Testing#undefined\"></a></h2><p>Q_1：Go 应该测试所有因子吗？<br><br>A_1：显然不是。</p>\n<p>Q_2：何时编写测试? 1.编码完成后？ 2.编码前？ 3.其他人遍写测试，像QA、TE？ 4.项目设计人员编写测试？<br><br>A_2：编码的同时编写测试代码（TDD）Article <a href=\"http://butunclebob.com/ArticleS.UncleBob.TheThreeRulesOfTdd\" target=\"_blank\" rel=\"noopener\">TheThreeRulesOfTdd</a></p>\n<p>Q_3：C 单元测试对象是 function ，Java 单元测试对象是 Class ，类内部的方法， Go 的单元测试对象是？<br><br>A_3：package 。测试行为，而非实施。 “The public API of a package declare this is <strong>what</strong>(行为) I do, not this is <strong>how</strong>(实施) I do it.”</p>\n<h2><span id=\"why-测试原因\">Why 测试原因</span><a href=\"2019/07/28/Go_Testing#undefined\"></a></h2><p>即使你不做代码测试，别人也会做。自己发现 issues 总比别人发现来得好，不是吗？<br></p>\n<ol>\n<li>大部分的测试(自动化)应该是开发人员自己做。</li>\n<li>手工测试不应该是你测试的主体部分，因为手工测试的复杂度为O(n)</li>\n<li>测试可以确保您始终可以运送主分支</li>\n<li>测试确定软件行为（做什么、不做什么）</li>\n<li>测试让你有信心修改他人的代码</li>\n</ol>\n<h2><span id=\"总结\">总结</span><a href=\"2019/07/28/Go_Testing#undefined\"></a></h2><ul>\n<li>You should write tests.</li>\n<li>You should write tests at the same time as you write your code.<br>Each Go package is a self contained unit.</li>\n<li>Your tests should assert the observable behaviour of your package, not its implementation.</li>\n<li>You should design your packages around their behaviour, not their implementation.</li>\n</ul>\n<p>【注】部分资料源于GopherChina 2019 - ‘How to write testable code’</p>\n","prev":{"title":"测试角度学习 cache2go","link":"2019/08/20/测试角度学习cache2go"},"next":{"title":"MySQL 使用及调优","link":"2019/05/20/MySQL使用及调优"},"plink":"http://yoursite.com/2019/07/28/Go_Testing/","toc":[{"title":"前言</span>","id":"前言","index":"1"},{"title":"How 测试方式</span>","id":"how-测试方式","index":"2","children":[{"title":"测试实现</span>","id":"测试实现","index":"2.1"},{"title":"测试执行</span>","id":"测试执行","index":"2.2"},{"title":"代码测试覆盖率</span>","id":"代码测试覆盖率","index":"2.3"}]},{"title":"What 测试对象</span>","id":"what-测试对象","index":"3"},{"title":"Why 测试原因</span>","id":"why-测试原因","index":"4"},{"title":"总结</span>","id":"总结","index":"5"}],"copyright":{"license":"unknown","published":"July 28, 2019","updated":"January 7, 2020","author":"wangwg"}}