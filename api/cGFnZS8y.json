{"per_page":8,"total":3,"current":2,"data":[{"title":"Go 的位运算","date":"2019-09-07T08:53:26.329Z","date_formatted":{"ll":"Sep 7, 2019","L":"09/07/2019","MM-DD":"09-07"},"excerpt":"<h2 id=\"Go-的位运算\">Go 的位运算<a href=\"2019/09/07/go的位运算#Go-的位运算\"></a></h2><p>在 Go 语言中支持以下几种操作位的方式：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 在 Go 语言中支持以下几种操作位的方式：</span></span><br><span class=\"line\"><span class=\"comment\">        &amp;   // 位与：仅当 a 和 b 都为 1 时，操作 a&amp;b 返回 1，否则返回 0。</span></span><br><span class=\"line\"><span class=\"comment\">        |   // 位或：仅当 a 和 b 都为 0 时，操作 a|b 返回 0，否则返回 1。</span></span><br><span class=\"line\"><span class=\"comment\">        ^   // 异或：仅当 a!=b 时，操作 a^b 返回 1，否则返回 0。</span></span><br><span class=\"line\"><span class=\"comment\">        &amp;^  // 位与非：仅当 a=1, b=0 时，操作 a&amp;^b 返回 1，否则返回 0。</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;&lt;  // 左移：a &lt;&lt; n，将 a 中的所有位向左偏移 n 次, 右边用0补齐</span></span><br><span class=\"line\"><span class=\"comment\">        &gt;&gt;  // 右移：a &gt;&gt; n; 将 a 中的所有位向右偏移 n 次, 左边用0补齐</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></div></figure>","link":"2019/09/07/go的位运算","tags":["Go"],"categories":["编程"]},{"title":"Ginkgo 测试框架使用入门","date":"2019-08-28T14:06:28.779Z","date_formatted":{"ll":"Aug 28, 2019","L":"08/28/2019","MM-DD":"08-28"},"excerpt":"<h2 id=\"Ginkgo-介绍\">Ginkgo 介绍<a href=\"2019/08/28/Ginkgo测试框架#Ginkgo-介绍\"></a></h2><p>Ginkgo是一个BDD风格的Go测试框架，旨在帮助您有效地编写富有表现力的综合测试。</p>","link":"2019/08/28/Ginkgo测试框架","tags":["Go","测试实践","测试框架"],"categories":["test"]},{"title":"测试角度学习 groupcache","date":"2019-08-21T13:09:32.578Z","date_formatted":{"ll":"Aug 21, 2019","L":"08/21/2019","MM-DD":"08-21"},"excerpt":"<h1 id=\"groupcache-介绍\">groupcache 介绍<a href=\"2019/08/21/测试角度学习groupcache#groupcache-介绍\"></a></h1><p>“groupcache is a caching and cache-filling library, intended as a replacement for memcached in many cases.”。作者如是介绍该项目，翻译后的意思为：groupcache 是一个缓存和缓存填充库，在许多情况下用作 memcached 的替代品。</p>\n<p>It is paused now..<br></p>","link":"2019/08/21/测试角度学习groupcache","tags":["Go","测试实践"],"categories":["test"]},{"title":"测试角度学习 cache2go","date":"2019-08-20T13:44:35.633Z","date_formatted":{"ll":"Aug 20, 2019","L":"08/20/2019","MM-DD":"08-20"},"excerpt":"<h2 id=\"cache2go-介绍\">cache2go 介绍<a href=\"2019/08/20/测试角度学习cache2go#cache2go-介绍\"></a></h2><p>“Concurrency-safe golang caching library with expiration capabilities.”。作者如是介绍该项目，翻译后的意思为：存在心跳机制且并发安全的go语言缓存库。</p>\n<h3 id=\"tips\">tips<a href=\"2019/08/20/测试角度学习cache2go#tips\"></a></h3><p>测试行为，而非实施。 “The public API of a package declare this is what(行为) I do, not this is <del>how(实施)</del> I do it.”</p>","link":"2019/08/20/测试角度学习cache2go","tags":["Go","测试实践"],"categories":["test"]},{"title":"Go Testing;How,What,Why","date":"2019-07-28T02:43:54.507Z","date_formatted":{"ll":"Jul 28, 2019","L":"07/28/2019","MM-DD":"07-28"},"excerpt":"<h2 id=\"前言\">前言<a href=\"2019/07/28/Go_Testing#前言\"></a></h2><p>关于 Go 测试，我们应该知道测试方式（或者说测试手段）、测试对象及测试原因。</p>","link":"2019/07/28/Go_Testing","tags":["Go","测试理论"],"categories":["test"]},{"title":"MySQL 使用及调优","date":"2019-05-20T15:34:08.724Z","date_formatted":{"ll":"May 20, 2019","L":"05/20/2019","MM-DD":"05-20"},"excerpt":"<h2 id=\"数据库使用、调优\">数据库使用、调优<a href=\"2019/05/20/MySQL使用及调优#数据库使用、调优\"></a></h2><ol>\n<li><a href=\"2019/05/20/MySQL使用及调优#1\">检索数据 select</a></li>\n<li><a href=\"2019/05/20/MySQL使用及调优#2\">排序数据 order by</a></li>\n<li><a href=\"2019/05/20/MySQL使用及调优#3\">过滤数据 where</a></li>\n<li><a href=\"2019/05/20/MySQL使用及调优#4\">数据过滤 where and / or / in / not in</a></li>\n<li><a href=\"2019/05/20/MySQL使用及调优#5\">模糊查询 like</a></li>\n<li><a href=\"2019/05/20/MySQL使用及调优#6\">正则匹配 regexp</a></li>\n<li><a href=\"2019/05/20/MySQL使用及调优#7\">创建计算字段 concat / trim</a></li>\n<li><a href=\"2019/05/20/MySQL使用及调优#8\">使用函数</a></li>\n<li><a href=\"2019/05/20/MySQL使用及调优#9\">分组/过滤 group by / having</a></li>\n<li><a href=\"2019/05/20/MySQL使用及调优#10\">使用子查询</a></li>\n<li><a href=\"2019/05/20/MySQL使用及调优#11\">联结表 join</a></li>\n<li><a href=\"2019/05/20/MySQL使用及调优#12\">组合查询 union</a></li>\n<li><a href=\"2019/05/20/MySQL使用及调优#13\">插入数据 insert</a></li>\n<li><a href=\"2019/05/20/MySQL使用及调优#14\">更新和删除数据 update/delete</a></li>\n<li><a href=\"2019/05/20/MySQL使用及调优#15\">创建和操作表 create/alter/references</a></li>\n<li><a href=\"2019/05/20/MySQL使用及调优#16\">使用视图 view</a></li>\n<li><a href=\"2019/05/20/MySQL使用及调优#17\">存储过程/游标/触发器/事务处理</a></li>\n<li><a href=\"2019/05/20/MySQL使用及调优#18\">全球化和本地化/安全管理/数据库维护</a></li>\n<li><a href=\"2019/05/20/MySQL使用及调优#19\">改善性能</a></li>\n</ol>","link":"2019/05/20/MySQL使用及调优","tags":["MySQL"],"categories":["编程"]},{"title":"C++ 指针","date":"2019-05-12T22:50:41.401Z","date_formatted":{"ll":"May 13, 2019","L":"05/13/2019","MM-DD":"05-13"},"excerpt":"<h2 id=\"指针\">指针<a href=\"2019/05/13/指针_C++#指针\"></a></h2><p>指针是一个变量，其存储的是值的地址，而不是值本身。 值的地址，只需对变量应用地址运算符(&amp;)，即可得到其地址；例如home是一个变量，则&amp;home是它的地址。   *运算符被称为间接值(indirect value)或解除引用(dereferencing)运算符，将其应用于指针，可以得到该地址存储的值。例如L: mainly是一个指针，则mainly是一个地址，*mainly表示存储在该地址处的值。</p>\n<h4 id=\"1-声明指针\">1.声明指针<a href=\"2019/05/13/指针_C++#1-声明指针\"></a></h4><p>要声明指向特定类型的指针，请使用下面的格式：<br><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typeName * pointerName;  <span class=\"comment\">// 示例： double * pn;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 指针声明的格式。传统上C程序员使用该格式：</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> *ptr;  <span class=\"comment\">// 强调 *ptr 是一个int类型的指针</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 而C++大多数使用下述格式：</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>* ptr;  <span class=\"comment\">// 强调 int* 是一种类型 -- 指向int的指针</span></span><br></pre></td></tr></table></div></figure></p>\n<p>其实，对于编译器来说空格所处位置没有区别，甚至可以不加空格，直接： int*ptr； 但是要知道的是，声明多个指针时，对每个指针变量名，都需要使用一个* 。</p>","link":"2019/05/13/指针_C++","tags":["C"],"categories":["编程"]},{"title":"设计模式","date":"2019-05-11T05:31:59.465Z","date_formatted":{"ll":"May 11, 2019","L":"05/11/2019","MM-DD":"05-11"},"excerpt":"","link":"2019/05/11/设计模式","tags":["Patterns"],"categories":["设计模式"]}]}