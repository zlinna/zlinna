{"title":"MySQL 水平|垂直切分","date":"2020-03-01T14:35:41.129Z","date_formatted":{"ll":"Mar 1, 2020","L":"03/01/2020","MM-DD":"03-01"},"link":"2020/03/01/MySQL 水平|垂直切分","comments":true,"tags":["MySQL"],"categories":["编程"],"updated":"2020-03-01T14:37:50.225Z","content":"<p>对于数据量比较大的表， 可以利用 MySQL 的水平切分或垂直切分的功能对数据表进行优化。</p>\n<h2><span id=\"垂直切分\">垂直切分</span><a href=\"2020/03/01/MySQL 水平|垂直切分#undefined\"></a></h2><p>功能描述: 用户信息的数据库表( tb_user ) 由于保存的很多信息， 这个表需要有特别多的列( Column ) ， 我们可以把用户的一部分信息(比如：家庭地址 Address 等) ， 存入另一个表。这里当然要有一个相同的主键user_id连接两个表。这种方式也可称为：row spliting。</p>\n<p>比较常用的垂直切分技术， 把一些变动较少的列放在一个表中( table 1 ) ， 然后把一些经常会变动的列放在另一个表中( table 2 ) ， 这样可以更高效的利用变动少的表( table 1 ) 中的查询缓存( Query cache ) ， 从而提升这部分数据的查询速度。</p>\n<h2><span id=\"水平切分\">水平切分</span><a href=\"2020/03/01/MySQL 水平|垂直切分#undefined\"></a></h2><p>功能描述: 比如存在一个用来保存用户信息的数据库表( tb_user ) ， 利用水平切分就是将 user_id 在 1~100000 的用户保存在tb_user_0中， user_id在 100001~200000 的用户保存在 tb_user_1 中…等等以此类推。这里需要 tb_user_0、tb_user_1、tb_user_2… 数据表的结构保持完全一样。</p>\n<p>比较常用的水平切分技术应用大致有两个方向。</p>\n<ul>\n<li>用来归档文件，将旧的数据放在一个表中，新的数据可以放到另一个表中。</li>\n<li>分片(Sharding) ， 分片就是将不同的表放在不同的服务器上。即 tb_user_0 放在 server 0 上， tb_user_1 放在server 1 上等。水平切分的条件包括：RANGE、LIST、HASH、KEY等， 总的来说就是根据某个partion key(必须是整数) 来决定数据所在的分区。</li>\n</ul>\n<h3><span id=\"优势\">优势</span><a href=\"2020/03/01/MySQL 水平|垂直切分#undefined\"></a></h3><ul>\n<li>MylSAM支持将表的多个部分存储于不同的文件系统或是磁盘， 可以存储更多数据；</li>\n<li>提供直接删除一个 Partition 的语句， 速度较快；</li>\n</ul>\n<h3><span id=\"局限性\">局限性</span><a href=\"2020/03/01/MySQL 水平|垂直切分#undefined\"></a></h3><ul>\n<li>innodb 不支持 directory 选择， partition后的表不能存储在多个路径中；</li>\n<li>至少在 MySQL 5.5 之前没有对 partition 进行并行优化(如 sum()、count()、max () 等) ；</li>\n<li>目前 MySQL 版本中还不支持多磁盘的并行 IO；</li>\n</ul>\n<h3><span id=\"案例\">案例</span><a href=\"2020/03/01/MySQL 水平|垂直切分#undefined\"></a></h3><p>针对数据量增长达到千万级的情况，做数据层面的优化处理。</p>\n<p>主键 id 为自增， 我们的水平切分策略就是用该 id 作为切分依据， 使用 RANGE 模式进行水平切分。</p>\n<p>根据 MySQL 的单表性能分析， 单表数据量在 500 万以下时， 基本上不会有影响， 所以本次水平切分的量级定义在 500 万。即每个分区最大存储 500 万条数据，超过 500 万条则保存到下一个分区表中。</p>\n<p>创建分区的 SQL 语句如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`LOG_HISTORY_TABLE`</span> <span class=\"keyword\">PARTITION</span> <span class=\"keyword\">BY</span> <span class=\"keyword\">RANGE</span>(<span class=\"keyword\">id</span>) <span class=\"keyword\">PARTITIONS</span> <span class=\"number\">5</span>(</span><br><span class=\"line\">  <span class=\"keyword\">PARTITION</span> part0 <span class=\"keyword\">VALUES</span> <span class=\"keyword\">LESS</span> <span class=\"keyword\">THAN</span>(<span class=\"number\">5000000</span>),</span><br><span class=\"line\">  <span class=\"keyword\">PARTITION</span> part1 <span class=\"keyword\">VALUES</span> <span class=\"keyword\">LESS</span> <span class=\"keyword\">THAN</span>(<span class=\"number\">10000000</span>),</span><br><span class=\"line\">  <span class=\"keyword\">PARTITION</span> part2 <span class=\"keyword\">VALUES</span> <span class=\"keyword\">LESS</span> <span class=\"keyword\">THAN</span>(<span class=\"number\">15000000</span>),</span><br><span class=\"line\">  <span class=\"keyword\">PARTITION</span> part3 <span class=\"keyword\">VALUES</span> <span class=\"keyword\">LESS</span> <span class=\"keyword\">THAN</span>(<span class=\"number\">20000000</span>),</span><br><span class=\"line\">  <span class=\"keyword\">PARTITION</span> part4 <span class=\"keyword\">VALUES</span> <span class=\"keyword\">LESS</span> <span class=\"keyword\">THAN</span>(MAXVALUE)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></div></figure>\n<p>依据 id 切分的这种方案可能不够完美。深入业务沟通，尝试利用关键字段进行分表可能更加符合业务应用。</p>\n","prev":{"title":"光圈、景深与虚化","link":"2020/08/08/摄影入门-光圈-景深"},"next":{"title":"测试用例分层机制","link":"2020/02/25/测试用例分层机制"},"plink":"http://yoursite.com/2020/03/01/MySQL 水平|垂直切分/","toc":[{"title":"垂直切分</span>","id":"垂直切分","index":"1"},{"title":"水平切分</span>","id":"水平切分","index":"2","children":[{"title":"优势</span>","id":"优势","index":"2.1"},{"title":"局限性</span>","id":"局限性","index":"2.2"},{"title":"案例</span>","id":"案例","index":"2.3"}]}],"copyright":{"license":"unknown","published":"March 1, 2020","updated":"March 1, 2020","author":"wangwg"}}