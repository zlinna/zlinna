{"title":"Python 基础学习","date":"2018-12-04T14:26:28.955Z","date_formatted":{"ll":"Dec 4, 2018","L":"12/04/2018","MM-DD":"12-04"},"link":"2018/12/04/python_basic","comments":true,"tags":["Python"],"categories":["编程"],"updated":"2020-01-06T16:13:04.288Z","content":"<h4><span id=\"一-类型与运算\">一、类型与运算</span><a href=\"2018/12/04/python_basic#undefined\"></a></h4><h5><span id=\"1寻求帮助\">1.寻求帮助</span><a href=\"2018/12/04/python_basic#undefined\"></a></h5><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dir(obj)          <span class=\"comment\"># 简单的列出对象obj所包含的方法名称，返回一个字符串列表</span></span><br><span class=\"line\">help(obj.func)    <span class=\"comment\"># 查询obj.func的具体介绍和用法</span></span><br></pre></td></tr></table></div></figure>\n<h5><span id=\"2测试类型的方法-推荐3\">2.测试类型的方法 （推荐3）</span><a href=\"2018/12/04/python_basic#undefined\"></a></h5><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> type(L) == type([]):</span><br><span class=\"line\">    print(<span class=\"string\">\"L is list\"</span>）</span><br><span class=\"line\"><span class=\"keyword\">if</span> type(L) == list:</span><br><span class=\"line\">    print(<span class=\"string\">\"L is list\"</span>）</span><br><span class=\"line\"><span class=\"keyword\">if</span> isinstance(L, list):</span><br><span class=\"line\">    print(<span class=\"string\">\"L is list\"</span>）</span><br></pre></td></tr></table></div></figure>\n<h5><span id=\"3python数据类型哈希不可哈希\">3.Python数据类型：哈希/不可哈希</span><a href=\"2018/12/04/python_basic#undefined\"></a></h5><p>哈希类型。不可变类型，可利用hash函数查看其hash值，也可以作为字典的key。具体有：</p>\n<blockquote>\n<p>数字类型：int, float, decimal.Decimal, fraction.Fraction, complex</p>\n<p>字符串类型：str, bytes</p>\n<p>元祖：tuple</p>\n<p>冻结集合：frozenset</p>\n<p>布尔类型：True， False</p>\n<p>None</p>\n</blockquote>\n<p>不可哈希类型。可变类型，不可以作为字典的key。有：list, dict, set</p>\n<a id=\"more\"></a>\n<h5><span id=\"4数字常量\">4.数字常量</span><a href=\"2018/12/04/python_basic#undefined\"></a></h5><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1234</span>, <span class=\"number\">-1234</span>, <span class=\"number\">0</span>, <span class=\"number\">999999999</span>             <span class=\"comment\"># 整数</span></span><br><span class=\"line\"><span class=\"number\">1.23</span>, <span class=\"number\">1.</span>, <span class=\"number\">3.14e-10</span>, <span class=\"number\">4E210</span>, <span class=\"number\">4.0e+210</span>   <span class=\"comment\"># 浮点数</span></span><br><span class=\"line\"><span class=\"number\">0o177</span>, <span class=\"number\">0x9ff</span>, <span class=\"number\">0X9FF</span>, <span class=\"number\">0b101010</span>         <span class=\"comment\"># 八进制、十六进制、二进制数字</span></span><br><span class=\"line\"><span class=\"number\">3</span>+<span class=\"number\">4j</span>, <span class=\"number\">3.0</span>+<span class=\"number\">4.0j</span>, <span class=\"number\">3J</span>           <span class=\"comment\"># 复数常量，也可以用complex(real, image)来创建</span></span><br><span class=\"line\">hex(I), oct(I), bin(I)       <span class=\"comment\"># 将十进制数转化为十六进制、八进制、二进制表示的“字符串”</span></span><br><span class=\"line\">int(string, base)                     <span class=\"comment\"># 将字符串转化为整数，base为进制数</span></span><br><span class=\"line\"><span class=\"comment\"># 2.x中，有两种整数类型：一般整数（32位）和长整数（无穷精度）。可以用l或L结尾，迫使一般整数成为长整数</span></span><br><span class=\"line\">float(<span class=\"string\">'inf'</span>), float(<span class=\"string\">'-inf'</span>), float(<span class=\"string\">'nan'</span>)    <span class=\"comment\"># 无穷大, 无穷小, 非数</span></span><br></pre></td></tr></table></div></figure>\n<h5><span id=\"5数字的表达式操作符\">5.数字的表达式操作符</span><a href=\"2018/12/04/python_basic#undefined\"></a></h5><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">yield</span> x                           <span class=\"comment\"># 生成器函数发送协议</span></span><br><span class=\"line\"><span class=\"keyword\">lambda</span> args: expression           <span class=\"comment\"># 生成匿名函数</span></span><br><span class=\"line\">x <span class=\"keyword\">if</span> y <span class=\"keyword\">else</span> z                     <span class=\"comment\"># 三元选择表达式</span></span><br><span class=\"line\">x <span class=\"keyword\">and</span> y, x <span class=\"keyword\">or</span> y, <span class=\"keyword\">not</span> x            <span class=\"comment\"># 逻辑与、逻辑或、逻辑非</span></span><br><span class=\"line\">x <span class=\"keyword\">in</span> y, x <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> y                <span class=\"comment\"># 成员对象测试</span></span><br><span class=\"line\">x <span class=\"keyword\">is</span> y, x <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> y                <span class=\"comment\"># 对象实体测试</span></span><br><span class=\"line\">x&lt;y, x&lt;=y, x&gt;y, x&gt;=y, x==y, x!=y    <span class=\"comment\"># 大小比较，集合子集或超集值相等性操作符</span></span><br><span class=\"line\"><span class=\"number\">1</span> &lt; a &lt; <span class=\"number\">3</span>                         <span class=\"comment\"># Python中允许连续比较</span></span><br><span class=\"line\">x|y, x&amp;y, x^y                     <span class=\"comment\"># 位或、位与、位异或</span></span><br><span class=\"line\">x&lt;&lt;y, x&gt;&gt;y                        <span class=\"comment\"># 位操作：x左移、右移y位</span></span><br><span class=\"line\">+, -, *, /, //, %, **             <span class=\"comment\"># 真除法、floor除法：返回不大于真除法结果的整数值、取余、幂运算</span></span><br><span class=\"line\">-x, +x, ~x                        <span class=\"comment\"># 一元减法、识别、按位求补（取反）</span></span><br><span class=\"line\">x[i], x[i:j:k]                    <span class=\"comment\"># 索引、分片、调用</span></span><br><span class=\"line\">int(<span class=\"number\">3.14</span>), float(<span class=\"number\">3</span>)               <span class=\"comment\"># 强制类型转换</span></span><br></pre></td></tr></table></div></figure>\n<h5><span id=\"6整数可计算所占位数\">6.整数可计算所占位数</span><a href=\"2018/12/04/python_basic#undefined\"></a></h5><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\">a.bit_length()  <span class=\"comment\"># 1位</span></span><br><span class=\"line\">b = <span class=\"number\">1024</span></span><br><span class=\"line\">b.bit_length()  <span class=\"comment\"># 11位</span></span><br></pre></td></tr></table></div></figure>\n<h5><span id=\"7repr和str的区别\">7.repr和str的区别</span><a href=\"2018/12/04/python_basic#undefined\"></a></h5><ul>\n<li>repr格式：默认的交互模式回显，产生的结果看起来它们就像是代码。</li>\n<li>str格式：打印语句，转化成一种对用户更加友好的格式。</li>\n</ul>\n<h5><span id=\"8数字相关模块\">8.数字相关模块</span><a href=\"2018/12/04/python_basic#undefined\"></a></h5><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># math模块</span></span><br><span class=\"line\"><span class=\"comment\"># Decimal模块：小数模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> decimal</span><br><span class=\"line\"><span class=\"keyword\">from</span> decimal <span class=\"keyword\">import</span> Decimal</span><br><span class=\"line\">Decimal(<span class=\"string\">\"0.01\"</span>) + Decimal(<span class=\"string\">\"0.02\"</span>)        <span class=\"comment\"># 返回Decimal(\"0.03\")</span></span><br><span class=\"line\">decimal.getcontext().prec = <span class=\"number\">4</span>            <span class=\"comment\"># 设置全局精度为4 即小数点后边4位</span></span><br><span class=\"line\"><span class=\"comment\"># Fraction模块：分数模块</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> fractions <span class=\"keyword\">import</span> Fraction</span><br><span class=\"line\">x = Fraction(<span class=\"number\">4</span>, <span class=\"number\">6</span>)                       <span class=\"comment\"># 分数类型 4/6</span></span><br><span class=\"line\">x = Fraction(<span class=\"string\">\"0.25\"</span>)                     <span class=\"comment\"># 分数类型 1/4 接收字符串类型的参数</span></span><br></pre></td></tr></table></div></figure>\n<h5><span id=\"9集合set\">9.集合set</span><a href=\"2018/12/04/python_basic#undefined\"></a></h5><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">set是一个无序不重复元素集, 基本功能包括关系测试和消除重复元素。</span></span><br><span class=\"line\"><span class=\"string\">set支持union(联合),intersection(交),difference(差)和symmetric_difference(对称差集)数学运算。</span></span><br><span class=\"line\"><span class=\"string\">set支持x in set, len(set), for x in set。</span></span><br><span class=\"line\"><span class=\"string\">set不记录元素位置或者插入点, 因此不支持indexing, slicing, 或其它类序列的操作</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">s = set([<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>])                          <span class=\"comment\"># 创建一个数值集合，返回&#123;3, 5, 9, 10&#125;</span></span><br><span class=\"line\">t = set(<span class=\"string\">\"Hello\"</span>)                             <span class=\"comment\"># 创建一个唯一字符的集合返回&#123;&#125;</span></span><br><span class=\"line\">a = t | s;    t.union(s)                     <span class=\"comment\"># t 和 s的并集</span></span><br><span class=\"line\">b = t &amp; s;    t.intersection(s)              <span class=\"comment\"># t 和 s的交集</span></span><br><span class=\"line\">c = t – s;    t.difference(s)                <span class=\"comment\"># 求差集（项在t中, 但不在s中）</span></span><br><span class=\"line\">d = t ^ s;    t.symmetric_difference(s)      <span class=\"comment\"># 对称差集（项在t或s中, 但不会同时出现在二者中）</span></span><br><span class=\"line\">t.add(<span class=\"string\">'x'</span>);   t.remove(<span class=\"string\">'H'</span>)                  <span class=\"comment\"># 增加/删除一个item</span></span><br><span class=\"line\">s.update([<span class=\"number\">10</span>,<span class=\"number\">37</span>,<span class=\"number\">42</span>])                         <span class=\"comment\"># 利用[......]更新s集合</span></span><br><span class=\"line\">x <span class=\"keyword\">in</span> s,  x <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> s                          <span class=\"comment\"># 集合中是否存在某个值</span></span><br><span class=\"line\">s.issubset(t);      s &lt;= t                   <span class=\"comment\"># 测试是否 s 中的每一个元素都在 t 中</span></span><br><span class=\"line\">s.issuperset(t);    s &gt;= t                   <span class=\"comment\"># 测试是否 t 中的每一个元素都在 s 中</span></span><br><span class=\"line\">s.copy();</span><br><span class=\"line\">s.discard(x);                                <span class=\"comment\"># 删除s中x</span></span><br><span class=\"line\">s.clear()                                    <span class=\"comment\"># 清空s</span></span><br><span class=\"line\">&#123;x**<span class=\"number\">2</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]&#125;                 <span class=\"comment\"># 集合解析，结果：&#123;16, 1, 4, 9&#125;</span></span><br><span class=\"line\">&#123;x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"string\">'spam'</span>&#125;                          <span class=\"comment\"># 集合解析，结果：&#123;'a', 'p', 's', 'm'&#125;</span></span><br></pre></td></tr></table></div></figure>\n<h5><span id=\"10冻结集合frozenset\">10.冻结集合frozenset</span><a href=\"2018/12/04/python_basic#undefined\"></a></h5><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">set是可变对象，即不存在hash值，不能作为字典的键值。同样的还有list等(tuple是可以作为字典key的)</span></span><br><span class=\"line\"><span class=\"string\">frozenset是不可变对象，即存在hash值，可作为字典的键值</span></span><br><span class=\"line\"><span class=\"string\">frozenset对象没有add、remove等方法，但有union/intersection/difference等方法</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">a = set([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\">b = set()</span><br><span class=\"line\">b.add(a)                     <span class=\"comment\"># error: set是不可哈希类型</span></span><br><span class=\"line\">b.add(frozenset(a))          <span class=\"comment\"># ok，将set变为frozenset，可哈希</span></span><br></pre></td></tr></table></div></figure>\n<h5><span id=\"11布尔类型bool\">11.布尔类型bool</span><a href=\"2018/12/04/python_basic#undefined\"></a></h5><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type(<span class=\"keyword\">True</span>)                   <span class=\"comment\"># 返回&lt;class 'bool'&gt;</span></span><br><span class=\"line\">isinstance(<span class=\"keyword\">False</span>, int)       <span class=\"comment\"># bool类型属于整型，所以返回True</span></span><br><span class=\"line\"><span class=\"keyword\">True</span> == <span class=\"number\">1</span>; <span class=\"keyword\">True</span> <span class=\"keyword\">is</span> <span class=\"number\">1</span>         <span class=\"comment\"># 输出(True, False)</span></span><br></pre></td></tr></table></div></figure>\n<h5><span id=\"12动态类型简介\">12.动态类型简介</span><a href=\"2018/12/04/python_basic#undefined\"></a></h5><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">变量名通过引用，指向对象。</span></span><br><span class=\"line\"><span class=\"string\">Python中的“类型”属于对象，而不是变量，每个对象都包含有头部信息，比如\"类型标示符\" \"引用计数器\"等</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"comment\">#共享引用及在原处修改：对于可变对象，要注意尽量不要共享引用！</span></span><br><span class=\"line\"><span class=\"comment\">#共享引用和相等测试：</span></span><br><span class=\"line\">    L = [<span class=\"number\">1</span>], M = [<span class=\"number\">1</span>], L <span class=\"keyword\">is</span> M            <span class=\"comment\"># 返回False</span></span><br><span class=\"line\">    L = M = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], L <span class=\"keyword\">is</span> M           <span class=\"comment\"># 返回True，共享引用</span></span><br><span class=\"line\"><span class=\"comment\">#增强赋值和共享引用：普通+号会生成新的对象，而增强赋值+=会在原处修改</span></span><br><span class=\"line\">    L = M = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">    L = L + [<span class=\"number\">3</span>, <span class=\"number\">4</span>]                      <span class=\"comment\"># L = [1, 2, 3, 4], M = [1, 2]</span></span><br><span class=\"line\">    L += [<span class=\"number\">3</span>, <span class=\"number\">4</span>]                         <span class=\"comment\"># L = [1, 2, 3, 4], M = [1, 2, 3, 4]</span></span><br></pre></td></tr></table></div></figure>\n<h5><span id=\"13常见字符串常量和表达式\">13.常见字符串常量和表达式</span><a href=\"2018/12/04/python_basic#undefined\"></a></h5><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S = <span class=\"string\">''</span>                                  <span class=\"comment\"># 空字符串</span></span><br><span class=\"line\">S = <span class=\"string\">\"spam’s\"</span>                            <span class=\"comment\"># 双引号和单引号相同</span></span><br><span class=\"line\">S = <span class=\"string\">\"s\\np\\ta\\x00m\"</span>                      <span class=\"comment\"># 转义字符</span></span><br><span class=\"line\">S = <span class=\"string\">\"\"\"spam\"\"\"</span>                          <span class=\"comment\"># 三重引号字符串，一般用于函数说明</span></span><br><span class=\"line\">S = <span class=\"string\">r'\\temp'</span>                            <span class=\"comment\"># Raw字符串，不会进行转义，抑制转义</span></span><br><span class=\"line\">S = <span class=\"string\">b'Spam'</span>                             <span class=\"comment\"># Python3中的字节字符串</span></span><br><span class=\"line\">S = <span class=\"string\">u'spam'</span>                             <span class=\"comment\"># Python2.6中的Unicode字符串</span></span><br><span class=\"line\">s1+s2, s1*<span class=\"number\">3</span>, s[i], s[i:j], len(s)       <span class=\"comment\"># 字符串操作</span></span><br><span class=\"line\"><span class=\"string\">'a %s parrot'</span> % <span class=\"string\">'kind'</span>                  <span class=\"comment\"># 字符串格式化表达式</span></span><br><span class=\"line\"><span class=\"string\">'a &#123;1&#125; &#123;0&#125; parrot'</span>.format(<span class=\"string\">'kind'</span>, <span class=\"string\">'red'</span>)<span class=\"comment\"># 字符串格式化方法</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> s: print(x)                    <span class=\"comment\"># 字符串迭代，成员关系</span></span><br><span class=\"line\">[x*<span class=\"number\">2</span> <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> s]                        <span class=\"comment\"># 字符串列表解析</span></span><br><span class=\"line\"><span class=\"string\">','</span>.join([<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>])               <span class=\"comment\"># 字符串输出，结果：a,b,c</span></span><br></pre></td></tr></table></div></figure>\n<h5><span id=\"14内置str处理函数\">14.内置str处理函数</span><a href=\"2018/12/04/python_basic#undefined\"></a></h5><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str1 = <span class=\"string\">\"stringobject\"</span></span><br><span class=\"line\"><span class=\"comment\"># 全部大写，全部小写、大小写转换，首字母大写，每个单词的首字母都大写</span></span><br><span class=\"line\">str1.upper(); str1.lower(); str1.swapcase(); str1.capitalize(); str1.title()        </span><br><span class=\"line\">str1.ljust(width)                       <span class=\"comment\"># 获取固定长度，左对齐，右边不够用空格补齐</span></span><br><span class=\"line\">str1.rjust(width)                       <span class=\"comment\"># 获取固定长度，右对齐，左边不够用空格补齐</span></span><br><span class=\"line\">str1.center(width)                      <span class=\"comment\"># 获取固定长度，中间对齐，两边不够用空格补齐</span></span><br><span class=\"line\">str1.zfill(width)                       <span class=\"comment\"># 获取固定长度，右对齐，左边不足用0补齐</span></span><br><span class=\"line\">str1.find(<span class=\"string\">'t'</span>,start,end)                <span class=\"comment\"># 查找字符串，可以指定起始及结束位置搜索</span></span><br><span class=\"line\">str1.rfind(<span class=\"string\">'t'</span>)                         <span class=\"comment\"># 从右边开始查找字符串</span></span><br><span class=\"line\">str1.count(<span class=\"string\">'t'</span>)                         <span class=\"comment\"># 查找字符串出现的次数</span></span><br><span class=\"line\"><span class=\"comment\"># 上面所有方法都可用index代替，不同的是使用index查找不到会抛异常，而find返回-1</span></span><br><span class=\"line\"><span class=\"comment\"># ---  --- #</span></span><br><span class=\"line\"><span class=\"comment\"># 替换函数，替换old为new，参数中可以指定maxReplaceTimes，即替换指定次数的old为new</span></span><br><span class=\"line\">str1.replace(<span class=\"string\">'old'</span>,<span class=\"string\">'new'</span>)               </span><br><span class=\"line\">str1.strip();                           <span class=\"comment\"># 默认删除空白符</span></span><br><span class=\"line\">str1.strip(<span class=\"string\">'d'</span>);                        <span class=\"comment\"># 删除str1字符串中开头、结尾处，位于 d 删除序列的字符</span></span><br><span class=\"line\">str1.lstrip();</span><br><span class=\"line\">str1.lstrip(<span class=\"string\">'d'</span>);                       <span class=\"comment\"># 删除str1字符串中开头处，位于 d 删除序列的字符</span></span><br><span class=\"line\">str1.rstrip();</span><br><span class=\"line\">str1.rstrip(<span class=\"string\">'d'</span>)                        <span class=\"comment\"># 删除str1字符串中结尾处，位于 d 删除序列的字符</span></span><br><span class=\"line\">str1.startswith(<span class=\"string\">'start'</span>)                <span class=\"comment\"># 是否以start开头</span></span><br><span class=\"line\">str1.endswith(<span class=\"string\">'end'</span>)                    <span class=\"comment\"># 是否以end结尾</span></span><br><span class=\"line\"><span class=\"comment\"># 判断字符串是否全为字符、数字、小写、大写</span></span><br><span class=\"line\">str1.isalnum(); str1.isalpha(); str1.isdigit(); str1.islower(); str1.isupper()</span><br></pre></td></tr></table></div></figure>\n<h5><span id=\"15字符串转换及另类拼接\">15.字符串转换及另类拼接</span><a href=\"2018/12/04/python_basic#undefined\"></a></h5><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.转换</span></span><br><span class=\"line\">int(<span class=\"string\">'42'</span>), str(<span class=\"number\">42</span>)                      <span class=\"comment\"># 返回(42, '42')</span></span><br><span class=\"line\">float(<span class=\"string\">'4.13'</span>), str(<span class=\"number\">4.13</span>)                <span class=\"comment\"># 返回(4.13, '4.13')</span></span><br><span class=\"line\">ord(<span class=\"string\">'s'</span>), chr(<span class=\"number\">115</span>)                      <span class=\"comment\"># 返回(115, 's')</span></span><br><span class=\"line\">int(<span class=\"string\">'1001'</span>, <span class=\"number\">2</span>)                          <span class=\"comment\"># 将字符串作为二进制数字，转化为数字，返回9</span></span><br><span class=\"line\"><span class=\"comment\"># 将整数转化为二进制/八进制/十六进制字符串，返回('0b1101', '015', '0xd')</span></span><br><span class=\"line\">bin(<span class=\"number\">13</span>), oct(<span class=\"number\">13</span>), hex(<span class=\"number\">13</span>)</span><br><span class=\"line\"><span class=\"comment\"># 2.另类拼接</span></span><br><span class=\"line\">name = <span class=\"string\">\"wang\"</span> <span class=\"string\">\"wg\"</span>                    <span class=\"comment\"># 单行，name = \"wangwg\"</span></span><br><span class=\"line\">name = <span class=\"string\">\"wang\"</span> \\</span><br><span class=\"line\">        <span class=\"string\">\"wg\"</span>                          <span class=\"comment\"># 多行，name = \"wangwg\"</span></span><br></pre></td></tr></table></div></figure>\n<h5><span id=\"16字符串格式化\">16.字符串格式化</span><a href=\"2018/12/04/python_basic#undefined\"></a></h5><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### 1.字符串格式化表达式 ###</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">基于C语言的'print'模型，并且在大多数的现有的语言中使用。</span></span><br><span class=\"line\"><span class=\"string\">通用结构：%[(name)][flag][width].[precision]typecode</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">\"this is %d %s bird\"</span> % (<span class=\"number\">1</span>, <span class=\"string\">'dead'</span>)                   <span class=\"comment\"># 一般的格式化表达式</span></span><br><span class=\"line\"><span class=\"string\">\"%s---%s---%s\"</span> % (<span class=\"number\">42</span>, <span class=\"number\">3.14</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])               <span class=\"comment\"># 字符串输出：'42---3.14---[1, 2, 3]'</span></span><br><span class=\"line\"><span class=\"comment\"># 对齐方式及填充：\"1234...  1234...1234  ...001234\"</span></span><br><span class=\"line\"><span class=\"string\">\"%d...%6d...%-6d...%06d\"</span> % (<span class=\"number\">1234</span>, <span class=\"number\">1234</span>, <span class=\"number\">1234</span>, <span class=\"number\">1234</span>)         </span><br><span class=\"line\">x = <span class=\"number\">1.23456789</span></span><br><span class=\"line\"><span class=\"string\">\"%e | %f | %g\"</span> % (x, x, x)                <span class=\"comment\"># 对齐方式：\"1.234568e+00 | 1.234568 | 1.23457\"</span></span><br><span class=\"line\"><span class=\"string\">\"%6.2f*%-6.2f*%06.2f*%+6.2f\"</span> % (x, x, x, x)     <span class=\"comment\"># 对齐方式：'  1.23*1.23  *001.23* +1.23'</span></span><br><span class=\"line\"><span class=\"string\">\"%(name1)d---%(name2)s\"</span> % &#123;<span class=\"string\">\"name1\"</span>:<span class=\"number\">23</span>, <span class=\"string\">\"name2\"</span>:<span class=\"string\">\"value2\"</span>&#125;           <span class=\"comment\"># 基于字典的格式化表达式</span></span><br><span class=\"line\"><span class=\"string\">\"%(name)s is %(age)d\"</span> % vars()    <span class=\"comment\"># vars()函数调用返回一个字典，包含了所有本函数调用时存在的变量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 2.字符串格式化调用方法 ###</span></span><br><span class=\"line\"><span class=\"comment\"># 普通调用</span></span><br><span class=\"line\"><span class=\"string\">\"&#123;0&#125;, &#123;1&#125; and &#123;2&#125;\"</span>.format(<span class=\"string\">'spam'</span>, <span class=\"string\">'ham'</span>, <span class=\"string\">'eggs'</span>)            <span class=\"comment\"># 基于位置的调用</span></span><br><span class=\"line\"><span class=\"string\">\"&#123;motto&#125; and &#123;pork&#125;\"</span>.format(motto = <span class=\"string\">'spam'</span>, pork = <span class=\"string\">'ham'</span>)   <span class=\"comment\"># 基于Key的调用</span></span><br><span class=\"line\"><span class=\"string\">\"&#123;motto&#125; and &#123;0&#125;\"</span>.format(<span class=\"string\">'ham'</span>, motto = <span class=\"string\">'spam'</span>)             <span class=\"comment\"># 混合调用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加键 属性 偏移量 (import sys)</span></span><br><span class=\"line\"><span class=\"comment\"># 基于位置的键和属性</span></span><br><span class=\"line\"><span class=\"string\">\"my &#123;1[spam]&#125; runs &#123;0.platform&#125;\"</span>.format(sys, &#123;<span class=\"string\">'spam'</span>:<span class=\"string\">'laptop'</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\"># 基于Key的键和属性</span></span><br><span class=\"line\"><span class=\"string\">\"&#123;config[spam]&#125; &#123;sys.platform&#125;\"</span>.format(sys = sys, config = &#123;<span class=\"string\">'spam'</span>:<span class=\"string\">'laptop'</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\"># 基于位置的偏移量</span></span><br><span class=\"line\"><span class=\"string\">\"first = &#123;0[0]&#125;, second = &#123;0[1]&#125;\"</span>.format([<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 具体格式化</span></span><br><span class=\"line\"><span class=\"comment\"># 输出'3.141590e+00, 3.142e+00, 3.14159'</span></span><br><span class=\"line\"><span class=\"string\">\"&#123;0:e&#125;, &#123;1:.3e&#125;, &#123;2:g&#125;\"</span>.format(<span class=\"number\">3.14159</span>, <span class=\"number\">3.14159</span>, <span class=\"number\">3.14159</span>)</span><br><span class=\"line\"><span class=\"string\">\"&#123;fieldname:format_spec&#125;\"</span>.format(......)</span><br><span class=\"line\"><span class=\"comment\"># 说明:</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    fieldname是指定参数的一个数字或关键字, 后边可跟可选的\".name\"或\"[index]\"成分引用</span></span><br><span class=\"line\"><span class=\"string\">    format_spec ::=  [[fill]align][sign][#][0][width][,][.precision][type]</span></span><br><span class=\"line\"><span class=\"string\">    fill        ::=  &lt;any character&gt;              #填充字符</span></span><br><span class=\"line\"><span class=\"string\">    align       ::=  \"&lt;\" | \"&gt;\" | \"=\" | \"^\"        #对齐方式</span></span><br><span class=\"line\"><span class=\"string\">    sign        ::=  \"+\" | \"-\" | \" \"              #符号说明</span></span><br><span class=\"line\"><span class=\"string\">    width       ::=  integer                      #字符串宽度</span></span><br><span class=\"line\"><span class=\"string\">    precision   ::=  integer                      #浮点数精度</span></span><br><span class=\"line\"><span class=\"string\">    type        ::=  \"b\" | \"c\" | \"d\" | \"e\" | \"E\" | \"f\" | \"F\" | \"g\" | \"G\" | \"n\" | \"o\" | \"s\" | \"x\" | \"X\" | \"%\"</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"comment\"># 例子:</span></span><br><span class=\"line\">    <span class=\"string\">'=&#123;0:10&#125; = &#123;1:10&#125;'</span>.format(<span class=\"string\">'spam'</span>, <span class=\"number\">123.456</span>)    <span class=\"comment\"># 输出'=spam       =    123.456'</span></span><br><span class=\"line\">    <span class=\"string\">'=&#123;0:&gt;10&#125;='</span>.format(<span class=\"string\">'test'</span>)                    <span class=\"comment\"># 输出'=      test='</span></span><br><span class=\"line\">    <span class=\"string\">'=&#123;0:&lt;10&#125;='</span>.format(<span class=\"string\">'test'</span>)                    <span class=\"comment\"># 输出'=test      ='</span></span><br><span class=\"line\">    <span class=\"string\">'=&#123;0:^10&#125;='</span>.format(<span class=\"string\">'test'</span>)                    <span class=\"comment\"># 输出'=   test   ='</span></span><br><span class=\"line\">    <span class=\"string\">'&#123;0:X&#125;, &#123;1:o&#125;, &#123;2:b&#125;'</span>.format(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>)   <span class=\"comment\"># 输出'FF, 377, 11111111'</span></span><br><span class=\"line\">    <span class=\"string\">'My name is &#123;0:&#123;1&#125;&#125;.'</span>.format(<span class=\"string\">'Fred'</span>, <span class=\"number\">7</span>)       <span class=\"comment\"># 输出'My name is Fred   .' 动态指定参数</span></span><br></pre></td></tr></table></div></figure>\n<h5><span id=\"17索引和分片\">17.索引和分片</span><a href=\"2018/12/04/python_basic#undefined\"></a></h5><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S[<span class=\"number\">0</span>], S[len(S)–<span class=\"number\">1</span>], S[<span class=\"number\">-1</span>]   <span class=\"comment\"># 索引</span></span><br><span class=\"line\"><span class=\"comment\"># 分片，第三个参数指定步长，如S[1:10:2]是从1位到10位没隔2位获取一个字符。</span></span><br><span class=\"line\">S[<span class=\"number\">1</span>:<span class=\"number\">3</span>], S[<span class=\"number\">1</span>:], S[:<span class=\"number\">-1</span>], S[<span class=\"number\">1</span>:<span class=\"number\">10</span>:<span class=\"number\">2</span>]  <span class=\"comment\"># list[begin:end:step]</span></span><br><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>]</span><br><span class=\"line\">a[<span class=\"number\">1</span>:<span class=\"number\">4</span>] = []  <span class=\"comment\"># 删除列表中1-4号元素后： a = [1, 5, 6, 7]</span></span><br><span class=\"line\">b = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>]</span><br><span class=\"line\"><span class=\"keyword\">del</span> b[::<span class=\"number\">2</span>]   <span class=\"comment\"># 去除偶数项(偶数索引的), b = [1, 3, 5, 7]</span></span><br></pre></td></tr></table></div></figure>\n<h5><span id=\"18常用列表常量和操作\">18.常用列表常量和操作</span><a href=\"2018/12/04/python_basic#undefined\"></a></h5><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">L = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>], <span class=\"string\">'string'</span>, &#123;&#125;]                        <span class=\"comment\"># 嵌套列表</span></span><br><span class=\"line\">L = list(<span class=\"string\">'spam'</span>)                                  <span class=\"comment\"># 列表初始化</span></span><br><span class=\"line\">L = list(range(<span class=\"number\">0</span>, <span class=\"number\">4</span>))                             <span class=\"comment\"># 列表初始化</span></span><br><span class=\"line\">list(map(ord, <span class=\"string\">'spam'</span>))                            <span class=\"comment\"># 列表解析</span></span><br><span class=\"line\">len(L)                                            <span class=\"comment\"># 求列表长度</span></span><br><span class=\"line\">L.count(value)                                    <span class=\"comment\"># 求列表中某个值的个数</span></span><br><span class=\"line\">L.append(obj)                          <span class=\"comment\"># 向列表的尾部添加数据，比如append(2)，添加元素2</span></span><br><span class=\"line\">L.insert(index, obj)                   <span class=\"comment\"># 向列表的指定index位置添加数据，index及其之后的数据后移</span></span><br><span class=\"line\"><span class=\"comment\"># 通过添加iterable中的元素来扩展列表，比如extend([2])，添加元素2，注意和append的区别</span></span><br><span class=\"line\">L.extend(interable)                     </span><br><span class=\"line\">L.index(value, [start, [stop]])        <span class=\"comment\"># 返回列表中值value的第一个索引</span></span><br><span class=\"line\">L.pop([index])                         <span class=\"comment\"># 删除并返回index处的元素，默认为删除并返回最后一个元素</span></span><br><span class=\"line\">L.remove(value)                        <span class=\"comment\"># 删除列表中的value值，只删除第一次出现的value的值</span></span><br><span class=\"line\">L.reverse()                                       <span class=\"comment\"># 反转列表</span></span><br><span class=\"line\">L.sort(cmp=<span class=\"keyword\">None</span>, key=<span class=\"keyword\">None</span>, reverse=<span class=\"keyword\">False</span>)         <span class=\"comment\"># 排序列表</span></span><br><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], b = a[<span class=\"number\">10</span>:]              <span class=\"comment\"># 注意，不会引发IndexError异常，只会返回一个空列表[]</span></span><br><span class=\"line\">a = [], a += [<span class=\"number\">1</span>]                       <span class=\"comment\"># 这里实在原有列表的基础上进行操作，即列表的id没有改变</span></span><br><span class=\"line\">a = [], a = a + [<span class=\"number\">1</span>]                    <span class=\"comment\"># 这里最后的a要构建一个新的列表，即a的id发生了变化</span></span><br></pre></td></tr></table></div></figure>\n<h5><span id=\"19常用字典常量和操作\">19.常用字典常量和操作</span><a href=\"2018/12/04/python_basic#undefined\"></a></h5><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D = &#123;&#125;</span><br><span class=\"line\">D = &#123;<span class=\"string\">'spam'</span>:<span class=\"number\">2</span>, <span class=\"string\">'tol'</span>:&#123;<span class=\"string\">'ham'</span>:<span class=\"number\">1</span>&#125;&#125;                   <span class=\"comment\"># 嵌套字典</span></span><br><span class=\"line\">D = dict.fromkeys([<span class=\"string\">'s'</span>, <span class=\"string\">'d'</span>], <span class=\"number\">8</span>)                  <span class=\"comment\"># &#123;'s': 8, 'd': 8&#125;</span></span><br><span class=\"line\">D = dict(name = <span class=\"string\">'tom'</span>, age = <span class=\"number\">12</span>)                  <span class=\"comment\"># &#123;'age': 12, 'name': 'tom'&#125;</span></span><br><span class=\"line\">D = dict([(<span class=\"string\">'name'</span>, <span class=\"string\">'tom'</span>), (<span class=\"string\">'age'</span>, <span class=\"number\">12</span>)])          <span class=\"comment\"># &#123;'age': 12, 'name': 'tom'&#125;</span></span><br><span class=\"line\">D = dict(zip([<span class=\"string\">'name'</span>, <span class=\"string\">'age'</span>], [<span class=\"string\">'tom'</span>, <span class=\"number\">12</span>]))       <span class=\"comment\"># &#123;'age': 12, 'name': 'tom'&#125;</span></span><br><span class=\"line\">D.keys(); D.values(); D.items()                   <span class=\"comment\"># 字典键、值以及键值对</span></span><br><span class=\"line\">D.get(key, default)                               <span class=\"comment\"># get函数</span></span><br><span class=\"line\">D.update(D_other)   <span class=\"comment\"># 合并字典，如果存在相同的键值，D_other的数据会覆盖掉D的数据</span></span><br><span class=\"line\">D.pop(key, [D])   <span class=\"comment\"># 删除字典中键值为key的项，返回键值为key的值，如果不存在，返回默认值D，否则异常</span></span><br><span class=\"line\">D.popitem()                                       <span class=\"comment\"># pop字典中随机的一项（一个键值对）</span></span><br><span class=\"line\"><span class=\"comment\"># 设置D中某一项的默认值。如果k存在，则返回D[k]，否则设置D[k]=d，同时返回D[k]。</span></span><br><span class=\"line\">D.setdefault(k[, d])</span><br><span class=\"line\"><span class=\"keyword\">del</span> D                                             <span class=\"comment\"># 删除字典</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> D[<span class=\"string\">'key'</span>]                                      <span class=\"comment\"># 删除字典的某一项</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> key <span class=\"keyword\">in</span> D:   <span class=\"keyword\">if</span> key <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> D:                   <span class=\"comment\"># 测试字典键是否存在</span></span><br><span class=\"line\"><span class=\"comment\"># 字典注意事项：（1）对新索引赋值会添加一项（2）字典键不一定非得是字符串，也可以为任何的不可变对象</span></span><br><span class=\"line\"><span class=\"comment\"># 不可变对象：调用对象自身的任意方法，也不会改变该对象自身的内容，这些方法会创建新的对象并返回。</span></span><br><span class=\"line\"><span class=\"comment\"># 字符串、整数、tuple都是不可变对象，dict、set、list都是可变对象</span></span><br><span class=\"line\">D[(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)] = <span class=\"number\">2</span>                                    <span class=\"comment\"># tuple作为字典的key</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 字典解析</span></span><br><span class=\"line\">D = &#123;k:<span class=\"number\">8</span> <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> [<span class=\"string\">'s'</span>, <span class=\"string\">'d'</span>]&#125;                                <span class=\"comment\"># &#123;'s': 8, 'd': 8&#125;</span></span><br><span class=\"line\">D = &#123;k:v <span class=\"keyword\">for</span> (k, v) <span class=\"keyword\">in</span> zip([<span class=\"string\">'name'</span>, <span class=\"string\">'age'</span>], [<span class=\"string\">'tom'</span>, <span class=\"number\">12</span>])&#125;    <span class=\"comment\"># &#123;'age': 12, 'name': tom&#125;</span></span><br></pre></td></tr></table></div></figure>\n<h5><span id=\"20文件基本操作\">20.文件基本操作</span><a href=\"2018/12/04/python_basic#undefined\"></a></h5><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output = open(<span class=\"string\">r'C:\\spam'</span>, <span class=\"string\">'w'</span>)          <span class=\"comment\"># 打开输出文件，用于写</span></span><br><span class=\"line\">input = open(<span class=\"string\">'data'</span>, <span class=\"string\">'r'</span>)               <span class=\"comment\"># 打开输入文件，用于读。打开的方式可以为'w', 'r', 'a', 'wb', 'rb', 'ab'等</span></span><br><span class=\"line\">fp.read([size])                         <span class=\"comment\"># size为读取的长度，以byte为单位</span></span><br><span class=\"line\">fp.readline([size])                     <span class=\"comment\"># 读一行，如果定义了size，有可能返回的只是一行的一部分</span></span><br><span class=\"line\">fp.readlines([size])                    <span class=\"comment\"># 把文件每一行作为一个list的一个成员，并返回这个list。其实它的内部是通过循环调用readline()来实现的。如果提供size参数，size是表示读取内容的总长。</span></span><br><span class=\"line\">fp.readable()                           <span class=\"comment\"># 是否可读</span></span><br><span class=\"line\">fp.write(str)                           <span class=\"comment\"># 把str写到文件中，write()并不会在str后加上一个换行符</span></span><br><span class=\"line\">fp.writelines(seq)                      <span class=\"comment\"># 把seq的内容全部写到文件中(多行一次性写入)</span></span><br><span class=\"line\">fp.writeable()                          <span class=\"comment\"># 是否可写</span></span><br><span class=\"line\">fp.close()                              <span class=\"comment\"># 关闭文件。</span></span><br><span class=\"line\">fp.flush()                              <span class=\"comment\"># 把缓冲区的内容写入硬盘</span></span><br><span class=\"line\">fp.fileno()                             <span class=\"comment\"># 返回一个长整型的”文件标签“</span></span><br><span class=\"line\">fp.isatty()                             <span class=\"comment\"># 文件是否是一个终端设备文件（unix系统中的）</span></span><br><span class=\"line\">fp.tell()                               <span class=\"comment\"># 返回文件操作标记的当前位置，以文件的开头为原点</span></span><br><span class=\"line\">fp.next()                               <span class=\"comment\"># 返回下一行，并将文件操作标记位移到下一行。把一个file用于for … in file这样的语句时，就是调用next()函数来实现遍历的。</span></span><br><span class=\"line\">fp.seek(offset[,whence])                <span class=\"comment\"># 将文件打开操作标记移到offset的位置。whence为0表示从头开始计算，1表示以当前位置为原点计算。2表示以文件末尾为原点进行计算。</span></span><br><span class=\"line\">fp.seekable()                           <span class=\"comment\"># 是否可以seek</span></span><br><span class=\"line\">fp.truncate([size])                     <span class=\"comment\"># 把文件裁成规定的大小，默认裁到当前文件操作标记的位置。</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> open(<span class=\"string\">'data'</span>):</span><br><span class=\"line\">    print(line)                         <span class=\"comment\"># 使用for语句，比较适用于打开比较大的文件</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'data'</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    print(file.readline())              <span class=\"comment\"># 使用with语句，可以保证文件关闭</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'data'</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    lines = file.readlines()            <span class=\"comment\"># 一次读入文件所有行，并关闭文件</span></span><br><span class=\"line\">open(<span class=\"string\">'f.txt'</span>, encoding = <span class=\"string\">'latin-1'</span>)     <span class=\"comment\"># Python3.x Unicode文本文件</span></span><br><span class=\"line\">open(<span class=\"string\">'f.bin'</span>, <span class=\"string\">'rb'</span>)                     <span class=\"comment\"># Python3.x 二进制bytes文件</span></span><br><span class=\"line\"><span class=\"comment\"># 文件对象还有相应的属性：buffer closed encoding errors line_buffering name newlines等</span></span><br></pre></td></tr></table></div></figure>\n<h5><span id=\"21其它\">21.其它</span><a href=\"2018/12/04/python_basic#undefined\"></a></h5><ul>\n<li>Python中的真假值含义：1. 数字如果非零，则为真，0为假。 2. 其他对象如果非空，则为真</li>\n<li>通常意义下的类型分类： 1. 数字、序列、映射。 2. 可变类型和不可变类型</li>\n</ul>\n","prev":{"title":"git 基础学习","link":"2018/12/05/git_learning"},"next":{"title":"Hello World","link":"2018/12/03/hello-world"},"plink":"http://yoursite.com/2018/12/04/python_basic/","copyright":{"published":"December 4, 2018","updated":"January 7, 2020","author":"wangwg","link":"<a href=\"http://yoursite.com/2018/12/04/python_basic/\" title=\"Python 基础学习\">http://yoursite.com/2018/12/04/python_basic/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}